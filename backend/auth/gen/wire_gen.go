// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package gen

import (
	"github.com/Ralphbaer/hubla/backend/auth/app"
	"github.com/Ralphbaer/hubla/backend/auth/handler"
	"github.com/Ralphbaer/hubla/backend/auth/repository"
	"github.com/Ralphbaer/hubla/backend/auth/usecase"
	"github.com/Ralphbaer/hubla/backend/common"
	"github.com/Ralphbaer/hubla/backend/common/hpostgres"
	"github.com/Ralphbaer/hubla/backend/common/jwt"
	"github.com/google/wire"
	"github.com/gorilla/mux"
	"net/http"
	"sync"
)

// Injectors from inject.go:

// InitializeApp setup the dependencies and returns a new *app.App instance
func InitializeApp() *app.App {
	config := app.NewConfig()
	postgresConnection := setupPostgreSQLConnection(config)
	userPostgresRepository := repository.NewUserPostgreSQLRepository(postgresConnection)
	userUseCase := &usecase.UserUseCase{
		UserRepo: userPostgresRepository,
	}
	jwtAuth := setupJWTAuth(config)
	loginHandler := &handler.LoginHandler{
		UseCase: userUseCase,
		JWTAuth: jwtAuth,
	}
	router := app.NewRouter(loginHandler)
	server := app.NewServer(config, router)
	appApp := &app.App{
		Server: server,
	}
	return appApp
}

// inject.go:

var onceConfig sync.Once

func setupPostgreSQLConnection(cfg *app.Config) *hpostgres.PostgresConnection {
	return &hpostgres.PostgresConnection{
		ConnectionString: cfg.PostgreSQLConnectionString,
	}
}

func setupJWTAuth(cfg *app.Config) *jwt.JWTAuth {
	return &jwt.JWTAuth{
		AccessTokenPrivateKey: cfg.AccessTokenPrivateKey,
		AccessTokenPublicKey:  cfg.AccessTokenPublicKey,
	}
}

var applicationSet = wire.NewSet(common.InitLocalEnvConfig, setupPostgreSQLConnection,
	setupJWTAuth, app.NewConfig, app.NewRouter, app.NewServer, repository.NewUserPostgreSQLRepository, wire.Struct(new(handler.LoginHandler), "*"), wire.Struct(new(usecase.UserUseCase), "*"), wire.Bind(new(repository.UserRepository), new(*repository.UserPostgresRepository)), wire.Bind(new(http.Handler), new(*mux.Router)),
)
