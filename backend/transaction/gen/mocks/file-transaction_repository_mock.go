// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Ralphbaer/hubla/backend/transaction/repository (interfaces: FileTransactionRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/Ralphbaer/hubla/backend/transaction/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockFileTransactionRepository is a mock of FileTransactionRepository interface.
type MockFileTransactionRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileTransactionRepositoryMockRecorder
}

// MockFileTransactionRepositoryMockRecorder is the mock recorder for MockFileTransactionRepository.
type MockFileTransactionRepositoryMockRecorder struct {
	mock *MockFileTransactionRepository
}

// NewMockFileTransactionRepository creates a new mock instance.
func NewMockFileTransactionRepository(ctrl *gomock.Controller) *MockFileTransactionRepository {
	mock := &MockFileTransactionRepository{ctrl: ctrl}
	mock.recorder = &MockFileTransactionRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileTransactionRepository) EXPECT() *MockFileTransactionRepositoryMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockFileTransactionRepository) Find(arg0 context.Context, arg1 string) (*entity.FileTransaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*entity.FileTransaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockFileTransactionRepositoryMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockFileTransactionRepository)(nil).Find), arg0, arg1)
}

// Save mocks base method.
func (m *MockFileTransactionRepository) Save(arg0 context.Context, arg1 *entity.FileTransaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFileTransactionRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFileTransactionRepository)(nil).Save), arg0, arg1)
}
