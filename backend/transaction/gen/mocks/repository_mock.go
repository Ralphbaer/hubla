// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Ralphbaer/hubla/backend/transaction/repository (interfaces: FileMetadataRepository)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	entity "github.com/Ralphbaer/hubla/backend/transaction/entity"
	gomock "github.com/golang/mock/gomock"
)

// MockFileMetadataRepository is a mock of FileMetadataRepository interface.
type MockFileMetadataRepository struct {
	ctrl     *gomock.Controller
	recorder *MockFileMetadataRepositoryMockRecorder
}

// MockFileMetadataRepositoryMockRecorder is the mock recorder for MockFileMetadataRepository.
type MockFileMetadataRepositoryMockRecorder struct {
	mock *MockFileMetadataRepository
}

// NewMockFileMetadataRepository creates a new mock instance.
func NewMockFileMetadataRepository(ctrl *gomock.Controller) *MockFileMetadataRepository {
	mock := &MockFileMetadataRepository{ctrl: ctrl}
	mock.recorder = &MockFileMetadataRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileMetadataRepository) EXPECT() *MockFileMetadataRepositoryMockRecorder {
	return m.recorder
}

// FindByHash mocks base method.
func (m *MockFileMetadataRepository) FindByHash(arg0 context.Context, arg1 string) (*entity.FileMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByHash", arg0, arg1)
	ret0, _ := ret[0].(*entity.FileMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByHash indicates an expected call of FindByHash.
func (mr *MockFileMetadataRepositoryMockRecorder) FindByHash(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByHash", reflect.TypeOf((*MockFileMetadataRepository)(nil).FindByHash), arg0, arg1)
}

// Save mocks base method.
func (m *MockFileMetadataRepository) Save(arg0 context.Context, arg1 *entity.FileMetadata) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockFileMetadataRepositoryMockRecorder) Save(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockFileMetadataRepository)(nil).Save), arg0, arg1)
}
